"""Event logger.

The `EventLogger` class handles the persistence of events generated by
the rule engine. It writes logs to a local file and optionally stores
associated images or metadata in a directory structure. This simple
implementation can later be extended to support more robust storage
solutions such as databases or message queues.
"""

from __future__ import annotations

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional


class EventLogger:
    """Log events to disk."""

    def __init__(self, log_dir: str) -> None:
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(parents=True, exist_ok=True)
        self.log_file = self.log_dir / "events.jsonl"

    def log(self, event: Dict[str, Any], image: Optional[Any] = None) -> None:
        """Write an event to the log file and optionally save an image.

        Parameters
        ----------
        event : dict
            The event data to log. It should be serializable to JSON.
        image : ndarray, optional
            An image associated with the event. If provided, the image
            will be saved as a JPEG under the event's timestamp.
        """
        timestamp = datetime.utcnow().isoformat()
        event["timestamp"] = timestamp
        with self.log_file.open("a") as f:
            f.write(json.dumps(event) + "\n")
        if image is not None:
            try:
                import cv2  # imported here to avoid top-level dependency
                image_path = self.log_dir / f"{timestamp}.jpg"
                cv2.imwrite(str(image_path), image)
            except ImportError:
                # If OpenCV is unavailable, skip saving the image
                pass
